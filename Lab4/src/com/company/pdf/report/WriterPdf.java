package com.company.pdf.report;

import com.company.graph.Graph;


import java.io.FileOutputStream;
import java.util.Date;

import com.company.html.report.templates.ValueExampleObject;
import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import java.util.Map;


public class WriterPdf {
	private static String FILE = "C:\\Dev_file\\facultate\\java\\Lab4\\raport.pdf";
	private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
										   Font.BOLD);
	private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
										   Font.NORMAL, BaseColor.RED);
	private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
										   Font.BOLD);
	private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
											 Font.BOLD);

	public  void run(Map<String, Graph> catalog) {
		try {
			Document document = new Document();
			PdfWriter.getInstance(document, new FileOutputStream(FILE));
			document.open();
			addTitlePage(document);
			addContent(document,catalog);
			document.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}


	private static void addTitlePage(Document document)
			throws DocumentException {
		Paragraph preface = new Paragraph();
		// We add one empty line
		addEmptyLine(preface, 1);
		// Lets write a big header
		preface.add(new Paragraph("Catalog de grafuri", catFont));

		addEmptyLine(preface, 1);
		// Will create: Report generated by: _name, _date
		preface.add(new Paragraph(
				"Raport generat de : " + System.getProperty("user.name") + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
				smallBold));
		addEmptyLine(preface, 3);
		preface.add(new Paragraph(
				"Acest document reprezinta un catalog de grafuri ",
				smallBold));
		addEmptyLine(preface, 8);
		document.add(preface);
		// Start a new page
		document.newPage();
	}

	private static void addContent(Document document ,Map<String, Graph> catalog) throws DocumentException {
		Anchor anchor = new Anchor("Grafuri", catFont);
		anchor.setName("Grafuri");
		Chapter catPart = new Chapter(new Paragraph("Grafuri"), 1);
		for (Map.Entry<String , Graph> entry:catalog.entrySet()) {
			Paragraph subPara = new Paragraph(entry.getValue().getName(), subFont);
			Section subCatPart = catPart.addSection(subPara);
			if(entry.getValue().getDescription()!=null)
			{
				subCatPart.add(new Paragraph(entry.getValue().getDescription()));
			}
			subCatPart.add(new Paragraph(entry.getValue().getPathDefinition()));
			subCatPart.add(new Paragraph(entry.getValue().getPathImage()));
		}
		document.add(catPart);
	}


	private static void addEmptyLine(Paragraph paragraph, int number) {
		for (int i = 0; i < number; i++) {
			paragraph.add(new Paragraph(" "));
		}
	}

}
